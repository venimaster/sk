cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

project( sk )

set(SK_OUTPUT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/_out/cb")
set(GLOBAL_SK_TEMP_DIR "${CMAKE_CURRENT_SOURCE_DIR}/z_tmp" )
set(SK_RUNTIME_OUTPUT_DIR "${SK_OUTPUT_DIR}/bin")
set(SK_LIBRARY_OUTPUT_DIR "${SK_OUTPUT_DIR}/bin")
set(SK_ARCHIVE_OUTPUT_DIR "${SK_OUTPUT_DIR}/lib")

if ( EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/LocalConfig.cmake )
    message( "Local user-defined CMake configuration LocalConfig.cmake is found." )
    include( LocalConfig.cmake )
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${SK_RUNTIME_OUTPUT_DIR}" )
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${SK_LIBRARY_OUTPUT_DIR}" )
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${SK_ARCHIVE_OUTPUT_DIR}" )

# Initialize CXXFLAGS.
if ( "${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU" )
  add_definitions( -Wall -pedantic )
  set(CMAKE_CXX_FLAGS                "-Wall -std=c++11")
  set(CMAKE_CXX_FLAGS_DEBUG          "-O0 -g")
  set(CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
  set(CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
  execute_process( COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
  if (NOT ( GCC_VERSION VERSION_GREATER 4.7 OR GCC_VERSION VERSION_EQUAL 4.7) )
    message(FATAL_ERROR "${PROJECT_NAME} requires g++ 4.7 or greater.")
  endif ()
elseif ( "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" )
  set(CMAKE_CXX_FLAGS                "-Wall -std=c++11 -stdlib=libc++")
  set(CMAKE_CXX_FLAGS_DEBUG          "-O0 -g")
  set(CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
  set(CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
elseif ( "${CMAKE_CXX_COMPILER_ID}" MATCHES "MSVC" )
  add_definitions ( /W3 )
else ()
  message ( FATAL_ERROR "Unknown compiler" )
endif ()

add_subdirectory( src )
